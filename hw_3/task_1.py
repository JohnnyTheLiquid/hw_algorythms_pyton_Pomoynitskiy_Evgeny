"""
Задание 1.

Реализуйте свои пользовательские функции, в которых реализуйте:

a) заполнение списка и словаря,
   сделайте замеры и сделайте выводы, что выполняется быстрее и почему
   И укажите сложность каждой ф-ции, которую вы применяете для заполнения.
   У этих ф-ций может быть разная сложность. Поэтому время заполнения списка и словаря может как совпадать, так и отличаться.
b) выполните набор операций и со списком, и со словарем,
   сделайте замеры и сделайте выводы, что и где выполняется быстрее и почему
   И укажите сложность ф-ций, которые вы используете для операций.

Подсказка: для замеров воспользуйтесь модулем time (см. примеры урока 1)

Примечание: eсли вы уже знаете, что такое декоратор и как его реализовать,
то реализуйте ф-цию-декоратор для подсчета времени работы ваших пользовательских функций
И примените ее к своим функциям!

Прошу вас внимательно читать ТЗ и не забыть выполнить все пункты.
"""
import time

lst = [i ** 2 for i in range(1000)]
dct = {i: i ** 2 for i in range(1000)}


def timing(func):
    """Принимает на вход функцию, возвращает разницу между отсечками времени конца и начала"""
    def t(*args):
        start = time.perf_counter()
        func(*args)
        finish = time.perf_counter()
        r = finish - start
        return r

    return t


@timing
def fill_list(n):
    """Сложность O(n)"""
    return [i ** 2 for i in range(n)]


@timing
def fill_dict(n):
    """Сложность 2 * O(n) надо создать в 2 раза больше элементов, чем n"""
    return {i: i ** 2 for i in range(n)}


@timing
def insert_in_list(val, lst):
    """Сложность O(n), в общем случае обращение к элементу с произвольным индексом"""
    idx = int(len(lst) / 2)
    lst.insert(idx, val)


@timing
def insert_in_dict(key, val, dct):
    """Сложность O(1) вставка по ключу не требует изменений в других элементах словаря"""
    dct[key] = val


@timing
def get_from_lst(idx, lst):
    """Сложность O(n), в общем случае вытаскивания элемента с произвольным индексом,
    поскольку вытаскивая элемент через pop() меняем остальные индексы"""
    lst.pop(idx)


@timing
def get_from_dct(key, dct):
    """Сложность O(1), в общем случае вытаскивания элемента с произвольным ключом"""
    return dct[key]


@timing
def delete_from_list(lst):
    """Сложность O(n), для удаления произвольного элемента требуется переписать индексы остальных после удаляемого"""
    idx = int(len(lst) / 2)
    del lst[idx]


@timing
def delete_from_dict(key, dct):
    """Сложность O(1), удаление по ключу не требует изменений в остальных парах ключ-значение"""
    del dct[key]


print(fill_list(10000))
print(fill_dict(10000))
print(insert_in_list(333, lst))
print(insert_in_dict(6, 15, dct))
print(get_from_lst(100, lst))
print(get_from_dct(6, dct))
print(delete_from_list(lst))
print(delete_from_dict(6, dct))

"""
1. Операция создания списка выполняется быстрее, чем создание словаря: 0.0047174999999999995
0.006092599999999997 соответственно. Для словаря в нашем случае надо создать в 2 раза больше элементов.

2. Операция вставки в список выполняется существенно медленнее, чем в словарь: 9.700000000001374e-06
2.5000000000025002e-06 соответственно. 
Для списка вставка в общем случае сложность O(n) поскольку для вставки элемента надо сдвинуть весь список. 
Вставка в словарь имеет сложность O(1) поскольку вставка ключ-значение не требует изменений в остальных парах.

3. Операция получения значения из списка ф-цией pop() по индексу более медленная, чем из словаря по ключу: 
9.700000000001374e-06 и 2.5000000000025002e-06 соответственно. Для словаря обращение по ключу имеет сложность O(1) 
поскольку не надо перебирать никакие значения. Для списка обращение по индексу ф-цией pop() имеет сложность в общем 
случае O(n) поскольку требует переиндексации элементов.

4. Операция удаления из списка выполняется более медленно, чем удаление из словаря: 3.599999999999437e-06
1.5999999999974368e-06 соответственно. Причина та же, что и в операции получения значения. Для словаря обращение по
ключу имеет сложность O(1), для списка O(n) в общем случае, поскольку требует изменения индексов после удаляемого
элемента.
"""

