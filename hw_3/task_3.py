"""
Задание 3.
Определить количество различных (уникальных) подстрок с использованием хеш-функции.
Дана строка S длиной N, состоящая только из строчных латинских букв.

Подсказка: примените вычисление хешей для подстрок с помощью хеш-функций и множества
Можно воспользоваться ф-цией hash() (см. материалы к уроку)

Пример:
рара - 6 уникальных подстрок

рар
ра
ар
ара
р
а
"""


def substr_1(s):
    """Принимает строку, делает из нее все возможные подстроки и
    возвращает количество уникальных через длину множества"""
    val = []
    for i in range(len(s) + 1):
        for j in range(i):
            val.append(s[j:i])
    return len(set(val)) - 1  # поскольку в количество войдет и сама исходная строка


def substr_2(s):
    """Принимает строку, делает из нее все возможные подстроки и
    возвращает количество уникальных через проверку на совпадение хэшей подстрок"""
    hashes = []
    for elem in [s[i:j] for i in range(len(s)) for j in range(len(s) + 1)]:
        if hash(elem) not in hashes:
            hashes.append(hash(elem))
    return len(hashes) - 2  # для пустых строк появляется лишний хэш 0
    # хэш полного слова нас также не интрересует


print(substr_1('papa'))
print(substr_2('papa'))
