"""
Задание 4.
Реализуйте скрипт "Кэширование веб-страниц"

Функция должна принимать url-адрес и проверять
есть ли в кэше соответствующая страница, если нет, то вносить ее в кэш

Подсказка: задачу решите обязательно с применением 'соленого' хеширования и хеш-таблиц
Можете условжнить задачу, реализовав ее через ООП
Не забудьте, что кэширование - механизм, а хеш-таблица - средство его реализации.

Задание творческое. Здесь нет жестких требований к выполнению.
"""
import uuid as u

salt = u.uuid3(u.NAMESPACE_DNS, 'salt').hex  # если использовать uuid4 то каждый раз генерируется новое число,
# что делает невозможной проверку загруженных, напр. из файла хэшей

cache_dict = {'e016a25f431331732a822856a72025c2': 'http://ya.ru'}


def cache_web(url, caсhe={}):
    """Принимает на вход url и словарь с кэшами страниц
    Возвращает либо True, если такой хэш есть, либо обновленный словарь хэшей.
    Если не передать словарь, то возвращает пару хэш:url если такого адреса в кэше нет.
    Для учебных целей хэш функцией взята md5"""
    import hashlib as h
    if h.md5(url.encode() + salt.encode()).hexdigest() in caсhe.keys():
        return True
    else:
        caсhe[h.md5(url.encode() + salt.encode()).hexdigest()] = url
    return caсhe


print(cache_web('http://mail.ru', cache_dict)) # -> {'e016a25f431331732a822856a72025c2': 'http://ya.ru',
# '965de1f61a972da370c22a9d60261965': 'http://mail.ru'}
print(cache_web('http://ya.ru', cache_dict)) # -> True
